package com.qa.framework.tests;

import com.qa.framework.core.TestBase;
import com.qa.framework.pages.LoginPage;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.TestInfo;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.CsvFileSource;
import org.junit.jupiter.params.provider.ValueSource;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import static com.codeborne.selenide.Selenide.*;
import static com.codeborne.selenide.WebDriverRunner.url;
import static org.junit.jupiter.api.Assertions.*;

import java.util.stream.Stream;

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ª–æ–≥–∏–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ JUnit 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏.
 *
 * @author Vitaliu
 * @version 1.0
 */
@DisplayName("üîê –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ª–æ–≥–∏–Ω–∞")
@Tag("Parameterized")
@Tag("Login")
@Tag("Regression")
public class ParameterizedLoginTest extends TestBase {

    private final LoginPage loginPage = new LoginPage();

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CSV –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ª–æ–≥–∏–Ω–∞.
     *
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
     * @param password –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
     * @param expectedSuccess –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (true/false)
     * @param description –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
     * @param testInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
     */
    @ParameterizedTest(name = "[{index}] {3}") // –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
    @CsvSource({
            "admin, securePass123!, true, '–£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'",
            "user1, strongPass456!, true, '–£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1'",
            "user2, safePass789!, true, '–£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2'",
            "wrong, wrongPassword, false, '–ù–µ–≤–µ—Ä–Ω—ã–µ credentials'",
            "'', strongPass456!, false, '–ü—É—Å—Ç–æ–π username'",
            "admin, '', false, '–ü—É—Å—Ç–æ–π password'"
    })
    @DisplayName("CSV Source Test")
    @Tag("Smoke")
    @Tag("UI")
    @Tag("DataFromCsvSource")
    void testLoginWithCsvSource(String username, String password,
                                boolean expectedSuccess, String description,
                                TestInfo testInfo) {

        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: " + description);
        System.out.println("üìä –¢–µ–≥–∏ —Ç–µ—Å—Ç–∞: " + testInfo.getTags());

        open("http://localhost:3000/login");
        loginPage.waitForPageLoad();

        loginPage.enterUsername(username)
                .enterPassword(password)
                .clickLogin();

        // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        if (expectedSuccess) {
            assertTrue(url().contains("/dashboard"),
                    "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard –¥–ª—è: " + description);
            System.out.println("‚úÖ " + description);
        } else {
            assertTrue(loginPage.isErrorMessageDisplayed() ||
                            url().contains("/login"),
                    "–î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ login —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è: " + description);
            System.out.println("‚ùå " + description + " - –∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å");
        }
    }

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CSV —Ñ–∞–π–ª–∞ –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
     * –î–∞–Ω–Ω—ã–µ —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞.
     *
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
     * @param password –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
     * @param expectedSuccess –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (true/false)
     * @param description –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    @ParameterizedTest(name = "[{index}] {3}") // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ description
    @CsvFileSource(resources = "/test-data/login-data.csv", numLinesToSkip = 1)
    @DisplayName("CSV File Test")
    @Tag("Regression")
    @Tag("UI")
    void testLoginWithCsvFile(String username, String password,
                              boolean expectedSuccess, String description) {

        open("http://localhost:3000/login");
        loginPage.waitForPageLoad();

        loginPage.enterUsername(username)
                .enterPassword(password)
                .clickLogin();

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        if (expectedSuccess) {
            assertTrue(url().contains("/dashboard"),
                    "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard –¥–ª—è: " + description);
        } else {
            assertTrue(loginPage.isErrorMessageDisplayed() ||
                            url().contains("/login"),
                    "–î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è: " + description);
        }
    }

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ValueSource –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ username.
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ username —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
     *
     * @param username —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è username
     */
    @ParameterizedTest
    @ValueSource(strings = {""}) // –ú–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    @DisplayName("Username validation test: {0}")
    @Tag("Validation")
    void testUsernameValidation(String username) {
        open("http://localhost:3000/login");
        loginPage.waitForPageLoad();

        loginPage.enterUsername(username)
                .clickLogin();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª—è
        if (username.isEmpty() || username.length() < 3) {
            assertTrue(loginPage.isUsernameFieldInvalid(),
                    "–ü–æ–ª–µ username –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è: " + username);
        } else {
            assertFalse(loginPage.isUsernameFieldInvalid(),
                    "–ü–æ–ª–µ username –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è: " + username);
        }
    }

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MethodSource.
     * –î–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –º–µ—Ç–æ–¥–æ–º provideEdgeCaseData().
     *
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
     * @param password –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
     * @param scenario –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    @ParameterizedTest
    @MethodSource("provideEdgeCaseData") //
    @DisplayName("Edge case test: {2}")
    @Tag("EdgeCase")
    @Tag("Security")
    void testLoginEdgeCases(String username, String password, String scenario) {
        open("http://localhost:3000/login");
        loginPage.waitForPageLoad();

        loginPage.enterUsername(username)
                .enterPassword(password)
                .clickLogin();

        try {
            Thread.sleep(1500);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        // –î–ª—è edge cases –æ–∂–∏–¥–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω
        assertTrue(loginPage.isErrorMessageDisplayed() ||
                        url().contains("/login"),
                "Edge case –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π: " + scenario);
    }

    /**
     * –ú–µ—Ç–æ–¥-–ø–æ—Å—Ç–∞–≤—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è edge cases.
     *
     * @return –ø–æ—Ç–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
     */
    private static Stream<Arguments> provideEdgeCaseData() {
        return Stream.of(
                Arguments.of("admin", "securePass123!".toUpperCase(), "Uppercase password"),
                Arguments.of("admin", "securepass123!", "Lowercase password"),
                Arguments.of("admin", "SECUREPASS123!", "Uppercase only"),
                Arguments.of("admin", "securePass123! ", "Password with trailing space"),
                Arguments.of(" admin", "securePass123!", "Username with leading space"),
                Arguments.of("<script>", "securePass123!", "XSS attempt in username"),
                Arguments.of("admin", "<script>alert()</script>", "XSS attempt in password")
        );
    }

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Null –∏ Empty Source.
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö –∏ null –∑–Ω–∞—á–µ–Ω–∏–π.
     *
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å null –∏–ª–∏ empty)
     */
    @ParameterizedTest
    @org.junit.jupiter.params.provider.NullSource
    @org.junit.jupiter.params.provider.EmptySource
    @DisplayName("Null/Empty username test: {0}")
    @Tag("Boundary")
    void testNullAndEmptyUsername(String username) {
        open("http://localhost:3000/login");
        loginPage.waitForPageLoad();

        if (username != null) {
            loginPage.enterUsername(username);
        }
        loginPage.clickLogin();

        assertTrue(loginPage.isUsernameFieldInvalid() ||
                        loginPage.isErrorMessageDisplayed(),
                "–ü—É—Å—Ç–æ–π –∏–ª–∏ null username –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É");
    }
}